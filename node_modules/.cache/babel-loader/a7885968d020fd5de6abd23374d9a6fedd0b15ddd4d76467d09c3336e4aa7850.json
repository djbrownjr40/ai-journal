{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"hero\",\n  ref: \"hero\"\n};\nconst _hoisted_2 = [\"src\"];\nconst _hoisted_3 = {\n  key: 0,\n  class: \"reveal-text\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"section\", {\n    class: \"landing-page\",\n    style: _normalizeStyle({\n      backgroundColor: $data.bgColor\n    })\n  }, [_createElementVNode(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.droplets, (droplet, index) => {\n    return _openBlock(), _createElementBlock(\"img\", {\n      key: index,\n      class: \"ink-droplet\",\n      src: $options.getRandomDroplet(),\n      style: _normalizeStyle($options.getDropletStyle())\n    }, null, 12 /* STYLE, PROPS */, _hoisted_2);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), $data.showText ? (_openBlock(), _createElementBlock(\"h1\", _hoisted_3, \"AI Journal\")) : _createCommentVNode(\"v-if\", true), !$data.showText ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 1,\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.startJournaling && $options.startJournaling(...args))\n  }, \"Start Your Journaling Journey\")) : _createCommentVNode(\"v-if\", true)], 4 /* STYLE */);\n}","map":{"version":3,"names":["class","ref","key","_createElementBlock","style","_normalizeStyle","backgroundColor","$data","bgColor","_createElementVNode","_hoisted_1","_Fragment","_renderList","droplets","droplet","index","src","$options","getRandomDroplet","getDropletStyle","_hoisted_2","showText","_hoisted_3","_createCommentVNode","onClick","_cache","args","startJournaling"],"sources":["C:\\Users\\d.Brown\\Desktop\\d.brown\\portfolio\\src\\components\\LandingPage.vue"],"sourcesContent":["<template>\r\n    <section class=\"landing-page\" :style=\"{ backgroundColor: bgColor }\">\r\n      <div class=\"hero\" ref=\"hero\">\r\n        <img\r\n          v-for=\"(droplet, index) in droplets\"\r\n          :key=\"index\"\r\n          class=\"ink-droplet\"\r\n          :src=\"getRandomDroplet()\"\r\n          :style=\"getDropletStyle()\"\r\n        />\r\n      </div>\r\n      <h1 v-if=\"showText\" class=\"reveal-text\">AI Journal</h1>\r\n      <button v-if=\"!showText\" @click=\"startJournaling\">Start Your Journaling Journey</button>\r\n    </section>\r\n  </template>\r\n  \r\n  <script>\r\n  import { gsap } from 'gsap';\r\n  import inkDroplet1 from '@/assets/inkDroplet1.svg';\r\n  import inkDroplet2 from '@/assets/inkDroplet2.svg';\r\n  import inkDroplet3 from '@/assets/inkDroplet3.svg';\r\n  import inkDroplet4 from '@/assets/inkDroplet4.svg';\r\n  import inkDroplet5 from '@/assets/inkDroplet5.svg';\r\n  import inkDroplet6 from '@/assets/inkDroplet6.svg';\r\n  \r\n  export default {\r\n    name: 'LandingPage',\r\n    data() {\r\n      return {\r\n        droplets: Array(100).fill(0), // Create an array with 100 entries\r\n        inkDroplets: [\r\n          inkDroplet1,\r\n          inkDroplet2,\r\n          inkDroplet3,\r\n          inkDroplet4,\r\n          inkDroplet5,\r\n          inkDroplet6,\r\n        ],\r\n        bgColor: 'transparent', // Initial background color\r\n        minSize: 20, // Minimum size in pixels\r\n        maxSize: 100, // Maximum size in pixels\r\n        showText: false, // Control the visibility of the text\r\n      };\r\n    },\r\n    methods: {\r\n      startJournaling() {\r\n        this.$router.push('/journaling');\r\n      },\r\n      getRandomDroplet() {\r\n        return this.inkDroplets[Math.floor(Math.random() * this.inkDroplets.length)];\r\n      },\r\n      getDropletStyle() {\r\n        const size = Math.random() * (this.maxSize - this.minSize) + this.minSize; // Random size within range\r\n        const left = Math.random() * 100; // Random left position (0% - 100%)\r\n        const top = Math.random() * 100; // Random top position (0% - 100%)\r\n        return {\r\n          width: `${size}px`,\r\n          height: `${size}px`,\r\n          left: `${left}%`,\r\n          top: `${top}%`,\r\n        };\r\n      },\r\n      animateDroplets() {\r\n        const droplets = this.$refs.hero.children;\r\n        Array.from(droplets).forEach((droplet, index) => {\r\n          const duration = 1.2 - (index / droplets.length) * 0.8; // Ramp up speed\r\n          gsap.fromTo(droplet, {\r\n            scale: 0.8,\r\n            opacity: 0,\r\n            y: -30,\r\n          }, {\r\n            scale: 1,\r\n            opacity: 1,\r\n            y: 0,\r\n            duration: duration,\r\n            delay: index * 0.05, // Adjusted delay for faster start\r\n            ease: 'power2.out',\r\n          });\r\n        });\r\n        \r\n        // Change background color to black after 6 seconds\r\n        setTimeout(() => {\r\n          this.bgColor = 'black';\r\n          this.showText = true; // Show text after background change\r\n        }, 6000);\r\n      },\r\n    },\r\n    mounted() {\r\n      this.$nextTick(() => {\r\n        this.animateDroplets(); // Ensure this runs after DOM updates\r\n      });\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .landing-page {\r\n    text-align: center;\r\n    padding: 50px;\r\n    background: url('@/assets/parchment.jpg') no-repeat center center;\r\n    background-size: cover;\r\n    height: 100vh;\r\n    position: relative;\r\n    transition: background-color 1s ease; /* Smooth transition for background color */\r\n  }\r\n  \r\n  .hero {\r\n    position: relative;\r\n    height: 100%;\r\n  }\r\n  \r\n  .ink-droplet {\r\n    position: absolute;\r\n    opacity: 0; /* Start invisible */\r\n    transition: opacity 0.3s ease; /* Smooth transition for opacity */\r\n  }\r\n  \r\n  .reveal-text {\r\n    color: white; /* Text color */\r\n    font-size: 48px; /* Adjust as needed */\r\n    position: absolute; /* Positioning for the text */\r\n    top: 20%; /* Adjust this value to change vertical position */\r\n    left: 50%; /* Center horizontally */\r\n    transform: translateX(-50%); /* Centering adjustment */\r\n    opacity: 0; /* Start invisible */\r\n    transition: opacity 1s ease; /* Smooth transition for text appearance */\r\n  }\r\n  </style>\r\n  "],"mappings":";;EAEWA,KAAK,EAAC,MAAM;EAACC,GAAG,EAAC;;mBAF5B;;EAAAC,GAAA;EAW0BF,KAAK,EAAC;;;uBAV5BG,mBAAA,CAYU;IAZDH,KAAK,EAAC,cAAc;IAAEI,KAAK,EADxCC,eAAA;MAAAC,eAAA,EAC6DC,KAAA,CAAAC;IAAO;MAC9DC,mBAAA,CAQM,OARNC,UAQM,I,kBAPJP,mBAAA,CAMEQ,SAAA,QATVC,WAAA,CAIqCL,KAAA,CAAAM,QAAQ,EAJ7C,CAIkBC,OAAO,EAAEC,KAAK;yBADxBZ,mBAAA,CAME;MAJCD,GAAG,EAAEa,KAAK;MACXf,KAAK,EAAC,aAAa;MAClBgB,GAAG,EAAEC,QAAA,CAAAC,gBAAgB;MACrBd,KAAK,EARhBC,eAAA,CAQkBY,QAAA,CAAAE,eAAe;oCARjCC,UAAA;0DAWgBb,KAAA,CAAAc,QAAQ,I,cAAlBlB,mBAAA,CAAuD,MAAvDmB,UAAuD,EAAf,YAAU,KAXxDC,mBAAA,gB,CAYqBhB,KAAA,CAAAc,QAAQ,I,cAAvBlB,mBAAA,CAAwF;IAZ9FD,GAAA;IAYgCsB,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAET,QAAA,CAAAU,eAAA,IAAAV,QAAA,CAAAU,eAAA,IAAAD,IAAA,CAAe;KAAE,+BAA6B,KAZrFH,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
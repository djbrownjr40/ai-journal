{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { gsap } from 'gsap';\nimport inkDroplet1 from '@/assets/inkDroplet1.svg';\nimport inkDroplet2 from '@/assets/inkDroplet2.svg';\nimport inkDroplet3 from '@/assets/inkDroplet3.svg';\nimport inkDroplet4 from '@/assets/inkDroplet4.svg';\nimport inkDroplet5 from '@/assets/inkDroplet5.svg';\nimport inkDroplet6 from '@/assets/inkDroplet6.svg';\n//   import { text } from 'express';\n\nexport default {\n  name: 'LandingPage',\n  data() {\n    return {\n      droplets: Array(100).fill(0),\n      // Create an array with 100 entries\n      inkDroplets: [inkDroplet1, inkDroplet2, inkDroplet3, inkDroplet4, inkDroplet5, inkDroplet6],\n      showText: false,\n      displayedText: '',\n      isTyping: false,\n      typingInProgress: false,\n      showNewLine: false,\n      newLineText: 'ジャーナル'\n    };\n  },\n  methods: {\n    animateText() {\n      if (this.typingInProgress) return;\n      this.typingInProgress = true;\n      const typingText = 'ai';\n      this.isTyping = true;\n      let index = 0;\n      const interval = setInterval(() => {\n        this.displayedText += typingText[index];\n        index++;\n        if (index === typingText.length) {\n          clearInterval(interval);\n          this.isTyping = false;\n          this.typingInProgress = false;\n          this.showNewLine = true;\n          this.animateNewLine();\n        }\n      }, 1000);\n    },\n    animateNewLine() {\n      const textElementTop = document.querySelector('.glitch-text-top');\n      const textElementBottom = document.querySelector('.glitch-text-bottom');\n      if (textElementTop && textElementBottom) {\n        const originalText = this.newLineText;\n\n        // Set initial colors\n        textElementTop.style.color = '#ff00ff';\n        textElementBottom.style.color = '#00ffff';\n        setInterval(() => {\n          const randomChar = String.fromCharCode(Math.random() * 126); // Generate a random character\n          const glitchTextTop = originalText.split('').map(char => {\n            return Math.random() < 0.2 ? randomChar : char; // 20% chance to replace a character\n          }).join('');\n          const glitchTextBottom = originalText.split('').map(char => {\n            return Math.random() < 0.2 ? randomChar : char; // Similar glitch for bottom text\n          }).join('');\n          textElementTop.textContent = glitchTextTop; // Update top text\n          textElementBottom.textContent = glitchTextBottom; // Update bottom text\n\n          // Randomly switch colors\n          if (Math.random() < 0.1) {\n            // 10% chance to switch colors\n            const newColorTop = textElementTop.style.color === 'rgb(255, 0, 255)' ? '#00ffff' : '#ff00ff';\n            textElementTop.style.color = newColorTop;\n            textElementBottom.style.color = newColorTop === '#ff00ff' ? '#00ffff' : '#ff00ff';\n          }\n        }, 100); // Update text every 100ms\n      } else {\n        console.error('Glitch text elements not found!');\n      }\n    },\n    startJournaling() {\n      this.$router.push('/journaling');\n    },\n    getRandomDroplet() {\n      return this.inkDroplets[Math.floor(Math.random() * this.inkDroplets.length)];\n    },\n    getDropletStyle() {\n      const size = Math.random() * (100 - 20) + 20; // Random size within range\n      const left = Math.random() * 100; // Random left position (0% - 100%)\n      const top = Math.random() * 100; // Random top position (0% - 100%)\n      return {\n        width: `${size}px`,\n        height: `${size}px`,\n        left: `${left}%`,\n        top: `${top}%`,\n        position: 'absolute' // Ensure droplets are positioned absolutely\n      };\n    },\n    animateDroplets() {\n      const droplets = this.$refs.hero.children;\n      Array.from(droplets).forEach((droplet, index) => {\n        const duration = 1.2 - index / droplets.length * 0.8; // Ramp up speed\n        gsap.fromTo(droplet, {\n          scale: 0.8,\n          opacity: 0,\n          y: -30\n        }, {\n          scale: 1,\n          opacity: 1,\n          y: 0,\n          duration: duration,\n          delay: index * 0.05,\n          // Adjusted delay for faster start\n          ease: 'power2.out'\n        });\n      });\n\n      // Start fading to black immediately\n      this.setBlackScreen();\n\n      // Show text after all droplets are animated\n      setTimeout(() => {\n        this.showText = true; // Show text after droplet animation\n      }, 3400); // Adjust timing as needed\n    },\n    setBlackScreen() {\n      const overlay = this.$refs.overlay; // Use Vue ref for the overlay\n      if (overlay) {\n        overlay.style.opacity = '1'; // Start fading to black\n        overlay.style.pointerEvents = 'all'; // Make overlay clickable\n\n        // After the fade duration, show the text\n        setTimeout(() => {\n          this.revealText();\n          if (!this.typingInProgress) {\n            this.animateText();\n          }\n        }, 3600); // Match this to the overlay transition duration\n      } else {\n        console.error('Overlay element not found!');\n      }\n    },\n    revealText() {\n      this.showText = true; // Reveal the text on top of the black screen\n      this.$nextTick(() => {\n        const text = document.querySelector('.reveal-text');\n        if (text) {\n          text.style.opacity = '1'; // Make text visible\n        }\n      });\n    }\n  },\n  mounted() {\n    this.$nextTick(() => {\n      this.animateDroplets();\n    });\n  }\n};","map":{"version":3,"names":["gsap","inkDroplet1","inkDroplet2","inkDroplet3","inkDroplet4","inkDroplet5","inkDroplet6","name","data","droplets","Array","fill","inkDroplets","showText","displayedText","isTyping","typingInProgress","showNewLine","newLineText","methods","animateText","typingText","index","interval","setInterval","length","clearInterval","animateNewLine","textElementTop","document","querySelector","textElementBottom","originalText","style","color","randomChar","String","fromCharCode","Math","random","glitchTextTop","split","map","char","join","glitchTextBottom","textContent","newColorTop","console","error","startJournaling","$router","push","getRandomDroplet","floor","getDropletStyle","size","left","top","width","height","position","animateDroplets","$refs","hero","children","from","forEach","droplet","duration","fromTo","scale","opacity","y","delay","ease","setBlackScreen","setTimeout","overlay","pointerEvents","revealText","$nextTick","text","mounted"],"sources":["C:\\Users\\d.Brown\\Desktop\\d.brown\\portfolio\\src\\components\\LandingPage.vue"],"sourcesContent":["<template>\r\n    <section class=\"landing-page\">\r\n<div>\r\n    <h1 v-if=\"showText\" class=\"reveal-text\">\r\n        {{ displayedText }}\r\n        <span class=\"cursor\" v-if=\"isTyping\"></span>\r\n    </h1>\r\n        <h2 v-if=\"showNewLine\" class=\"glitch-text\">\r\n        <span class=\"glitch-text-top\">{{ newLineText }}</span>\r\n        <span class=\"glitch-text-bottom\">{{ newLineText }}</span>\r\n    </h2>\r\n</div>\r\n      <div class=\"hero\" ref=\"hero\">\r\n          <img\r\n          v-for=\"(droplet, index) in droplets\"\r\n          :key=\"index\"\r\n          class=\"ink-droplet\"\r\n          :src=\"getRandomDroplet()\"\r\n          :style=\"getDropletStyle()\"\r\n          />\r\n        </div>\r\n        <button v-if=\"!showText\" @click=\"startJournaling\">Start Your Journaling Journey</button>\r\n      <div class=\"overlay\" ref=\"overlay\"></div> <!-- Overlay for fading to black -->\r\n    </section>\r\n  </template>\r\n  \r\n  <script>\r\n  import { gsap } from 'gsap';\r\n  import inkDroplet1 from '@/assets/inkDroplet1.svg';\r\n  import inkDroplet2 from '@/assets/inkDroplet2.svg';\r\n  import inkDroplet3 from '@/assets/inkDroplet3.svg';\r\n  import inkDroplet4 from '@/assets/inkDroplet4.svg';\r\n  import inkDroplet5 from '@/assets/inkDroplet5.svg';\r\n  import inkDroplet6 from '@/assets/inkDroplet6.svg';\r\n//   import { text } from 'express';\r\n  \r\n  export default {\r\n    name: 'LandingPage',\r\n    data() {\r\n      return {\r\n        droplets: Array(100).fill(0), // Create an array with 100 entries\r\n        inkDroplets: [\r\n          inkDroplet1,\r\n          inkDroplet2,\r\n          inkDroplet3,\r\n          inkDroplet4,\r\n          inkDroplet5,\r\n          inkDroplet6,\r\n        ],\r\n        showText: false,\r\n        displayedText: '',\r\n        isTyping: false,\r\n        typingInProgress: false,\r\n        showNewLine: false,\r\n        newLineText: 'ジャーナル',\r\n      };\r\n    },\r\n    methods: {\r\n        animateText(){\r\n            if (this.typingInProgress) return;\r\n\r\n            this.typingInProgress = true;\r\n            const typingText = 'ai';\r\n            this.isTyping = true;\r\n\r\n            let index = 0;\r\n            const interval = setInterval(() => {\r\n                this.displayedText += typingText[index];\r\n                index++;\r\n                if (index === typingText.length) {\r\n                    clearInterval(interval);\r\n                    this.isTyping = false;\r\n                    this.typingInProgress = false;\r\n                    this.showNewLine = true;\r\n                    this.animateNewLine();\r\n                }\r\n            }, 1000);\r\n        },\r\n    animateNewLine() {\r\n    const textElementTop = document.querySelector('.glitch-text-top');\r\n    const textElementBottom = document.querySelector('.glitch-text-bottom');\r\n    \r\n    if (textElementTop && textElementBottom) {\r\n        const originalText = this.newLineText;\r\n\r\n        // Set initial colors\r\n        textElementTop.style.color = '#ff00ff';\r\n        textElementBottom.style.color = '#00ffff';\r\n\r\n        setInterval(() => {\r\n            const randomChar = String.fromCharCode(Math.random() * 126); // Generate a random character\r\n            const glitchTextTop = originalText.split('').map((char) => {\r\n                return Math.random() < 0.2 ? randomChar : char; // 20% chance to replace a character\r\n            }).join('');\r\n\r\n            const glitchTextBottom = originalText.split('').map((char) => {\r\n                return Math.random() < 0.2 ? randomChar : char; // Similar glitch for bottom text\r\n            }).join('');\r\n\r\n            textElementTop.textContent = glitchTextTop; // Update top text\r\n            textElementBottom.textContent = glitchTextBottom; // Update bottom text\r\n\r\n            // Randomly switch colors\r\n            if (Math.random() < 0.1) { // 10% chance to switch colors\r\n                const newColorTop = textElementTop.style.color === 'rgb(255, 0, 255)' ? '#00ffff' : '#ff00ff';\r\n                textElementTop.style.color = newColorTop;\r\n                textElementBottom.style.color = newColorTop === '#ff00ff' ? '#00ffff' : '#ff00ff';\r\n            }\r\n        }, 100); // Update text every 100ms\r\n    } else {\r\n        console.error('Glitch text elements not found!');\r\n    }\r\n},\r\n      startJournaling() {\r\n        this.$router.push('/journaling');\r\n      },\r\n      getRandomDroplet() {\r\n        return this.inkDroplets[Math.floor(Math.random() * this.inkDroplets.length)];\r\n      },\r\n      getDropletStyle() {\r\n        const size = Math.random() * (100 - 20) + 20; // Random size within range\r\n        const left = Math.random() * 100; // Random left position (0% - 100%)\r\n        const top = Math.random() * 100; // Random top position (0% - 100%)\r\n        return {\r\n          width: `${size}px`,\r\n          height: `${size}px`,\r\n          left: `${left}%`,\r\n          top: `${top}%`,\r\n          position: 'absolute', // Ensure droplets are positioned absolutely\r\n        };\r\n      },\r\n      animateDroplets() {\r\n        const droplets = this.$refs.hero.children;\r\n        Array.from(droplets).forEach((droplet, index) => {\r\n          const duration = 1.2 - (index / droplets.length) * 0.8; // Ramp up speed\r\n          gsap.fromTo(droplet, {\r\n            scale: 0.8,\r\n            opacity: 0,\r\n            y: -30,\r\n          }, {\r\n            scale: 1,\r\n            opacity: 1,\r\n            y: 0,\r\n            duration: duration,\r\n            delay: index * 0.05, // Adjusted delay for faster start\r\n            ease: 'power2.out',\r\n          });\r\n        });\r\n  \r\n        // Start fading to black immediately\r\n        this.setBlackScreen();\r\n  \r\n        // Show text after all droplets are animated\r\n        setTimeout(() => {\r\n          this.showText = true; // Show text after droplet animation\r\n        }, 3400); // Adjust timing as needed\r\n      },\r\n      setBlackScreen() {\r\n        const overlay = this.$refs.overlay; // Use Vue ref for the overlay\r\n        if (overlay) {\r\n          overlay.style.opacity = '1'; // Start fading to black\r\n          overlay.style.pointerEvents = 'all'; // Make overlay clickable\r\n  \r\n          // After the fade duration, show the text\r\n          setTimeout(() => {\r\n            this.revealText();\r\n            if (!this.typingInProgress) { \r\n                this.animateText();\r\n            }\r\n          }, 3600); // Match this to the overlay transition duration\r\n        } else {\r\n          console.error('Overlay element not found!');\r\n        }\r\n      },\r\n      revealText() {\r\n        this.showText = true; // Reveal the text on top of the black screen\r\n        this.$nextTick(() => {\r\n          const text = document.querySelector('.reveal-text');\r\n          if (text) {\r\n            text.style.opacity = '1'; // Make text visible\r\n          }\r\n        });\r\n      }\r\n    },\r\n    mounted() {\r\n      this.$nextTick(() => {\r\n        this.animateDroplets();\r\n      });\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n.glitch {\r\n    animation: glitch 1s forwards;\r\n}\r\n\r\n.glitch-text {\r\n    position: relative;\r\n    display: inline-block; /* Allows positioning of child elements */\r\n    z-index: 2; /* Higher z-index to ensure it’s above the overlay */\r\n}\r\n\r\n.glitch-text-top {\r\n    position: absolute;\r\n    left: 0;\r\n    top: -10px; /* Adjust this for the superscript effect */\r\n    color: #ff00ff; /* Initial color */\r\n    transition: color 0.5s ease; /* Smooth color transition */\r\n    z-index: 1; /* Make sure it's above the bottom text */\r\n}\r\n\r\n.glitch-text-bottom {\r\n    color: #00ffff; /* Shadow color */\r\n    opacity: 0.5; /* Slight transparency for shadow effect */\r\n    transition: color 0.5s ease; /* Smooth color transition */\r\n}\r\n\r\n@keyframes glitch {\r\n    0% {\r\n        opacity: 1;\r\n        transform: translate(0);\r\n    }\r\n    10% {\r\n        opacity: 1;\r\n        transform: translate(-2px, -2px);\r\n    }\r\n    20% {\r\n        opacity: 0.8;\r\n        transform: translate(2px, 0);\r\n    }\r\n    30% {\r\n        opacity: 0.5;\r\n        transform: translate(-1px, 1px);\r\n    }\r\n    40% {\r\n        opacity: 1;\r\n        transform: translate(1px, -1px);\r\n    }\r\n    50% {\r\n        opacity: 1;\r\n        transform: translate(0);\r\n    }\r\n    60% {\r\n        opacity: 0.5;\r\n        transform: translate(0, 2px);\r\n    }\r\n    70% {\r\n        opacity: 1;\r\n        transform: translate(-2px, 0);\r\n    }\r\n    80% {\r\n        opacity: 0.8;\r\n        transform: translate(2px, 1px);\r\n    }\r\n    100% {\r\n        opacity: 1;\r\n        transform: translate(0);\r\n    }\r\n}\r\n\r\n  .cursor {\r\n  display: inline-block;\r\n  width: 2px; /* Width of the cursor */\r\n  height: 34px; /* Height of the cursor */\r\n  background-color: white; /* Cursor color */\r\n  animation: blink 0.7s step-end infinite; /* Blinking effect */\r\n}\r\n\r\n@keyframes blink {\r\n  0%, 100% {\r\n    opacity: 1; /* Visible */\r\n  }\r\n  50% {\r\n    opacity: 0; /* Invisible */\r\n  }\r\n}\r\n\r\n  .landing-page {\r\n    text-align: center;\r\n    padding: 50px;\r\n    background: url('@/assets/parchment.jpg') no-repeat center center;\r\n    background-size: cover;\r\n    background-attachment: fixed; /* Keep background fixed */\r\n    height: 100vh; /* Full viewport height */\r\n    position: relative;\r\n    overflow: hidden; /* Prevent scrollbars */\r\n  }\r\n  \r\n  .hero {\r\n    position: relative;\r\n    height: 100%;\r\n  }\r\n  \r\n  .ink-droplet {\r\n    opacity: 0; /* Start invisible */\r\n  }\r\n  \r\n  .reveal-text {\r\n  color: white; /* Text color */\r\n  font-size: 48px; /* Adjust as needed */\r\n  position: absolute; /* Positioning for the text */\r\n  top: 50%; /* Center vertically */\r\n  left: 50%; /* Center horizontally */\r\n  transform: translate(-50%, -50%); /* Centering adjustment */\r\n  opacity: 0; /* Start invisible */\r\n  transition: opacity 1s ease; /* Smooth transition for text appearance */\r\n  z-index: 2; /* Higher z-index */\r\n}\r\n  \r\n  .overlay {\r\n  position: fixed; /* Fixed to cover the viewport */\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: black; /* Solid black */\r\n  opacity: 0; /* Start invisible */\r\n  transition: opacity 8s ease; /* Smooth transition to black (8 seconds) */\r\n  pointer-events: none; /* Allow clicks to pass through */\r\n  z-index: 1; /* Lower z-index */\r\n}\r\n  </style>\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
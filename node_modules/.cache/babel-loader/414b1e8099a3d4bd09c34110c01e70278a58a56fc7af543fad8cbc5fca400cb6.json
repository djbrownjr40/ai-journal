{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { gsap } from 'gsap';\nimport inkDroplet1 from '@/assets/inkDroplet1.svg';\nimport inkDroplet2 from '@/assets/inkDroplet2.svg';\nimport inkDroplet3 from '@/assets/inkDroplet3.svg';\nimport inkDroplet4 from '@/assets/inkDroplet4.svg';\nimport inkDroplet5 from '@/assets/inkDroplet5.svg';\nimport inkDroplet6 from '@/assets/inkDroplet6.svg';\n//   import { text } from 'express';\n\nexport default {\n  name: 'LandingPage',\n  data() {\n    return {\n      droplets: Array(100).fill(0),\n      // Create an array with 100 entries\n      inkDroplets: [inkDroplet1, inkDroplet2, inkDroplet3, inkDroplet4, inkDroplet5, inkDroplet6],\n      showText: false,\n      displayedText: '',\n      isTyping: false,\n      typingInProgress: false,\n      // showNewLine: false,\n      newLineText: 'ジャーナル'\n    };\n  },\n  methods: {\n    animateText() {\n      if (this.typingInProgress) return;\n      this.typingInProgress = true;\n      const typingText = 'ai';\n      this.isTyping = true;\n      let index = 0;\n      const interval = setInterval(() => {\n        this.displayedText += typingText[index];\n        index++;\n        if (index === typingText.length) {\n          clearInterval(interval);\n          // this.isTyping = false;\n          this.typingInProgress = false;\n          // this.showNewLine = true;\n          // this.animateNewLine();\n        }\n      }, 1000);\n    },\n    // animateNewLine() {\n    //     const textElementTop = document.querySelector('.glitch-text-top');\n    //     const textElementBottom = document.querySelector('.glitch-text-bottom');\n\n    //     if (textElementTop && textElementBottom) {\n    //         const originalText = this.newLineText;\n\n    //         // Set initial colors\n    //         let topColor = '#ff00ff';\n    //         let bottomColor = '#00ffff';\n    //         textElementTop.style.color = topColor;\n    //         textElementBottom.style.color = bottomColor;\n\n    //         // Function to switch colors\n    //         const switchColors = () => {\n    //             [topColor, bottomColor] = [bottomColor, topColor]; // Swap colors\n    //             textElementTop.style.color = topColor;\n    //             textElementBottom.style.color = bottomColor;\n    //         };\n\n    //         // Change color every 3 to 5 seconds\n    //         setInterval(switchColors, Math.random() * 2000 + 3000); // Between 3000ms (3s) and 5000ms (5s)\n\n    //         setInterval(() => {\n    //             const randomChar = String.fromCharCode(Math.random() * 126); // Generate a random character\n    //             const glitchTextTop = originalText.split('').map((char) => {\n    //                 return Math.random() < 0.2 ? randomChar : char; // 20% chance to replace a character\n    //             }).join('');\n\n    //             const glitchTextBottom = originalText.split('').map((char) => {\n    //                 return Math.random() < 0.2 ? randomChar : char; // Similar glitch for bottom text\n    //             }).join('');\n\n    //             textElementTop.textContent = glitchTextTop; // Update top text\n    //             textElementBottom.textContent = glitchTextBottom; // Update bottom text\n    //         }, 100); // Update text every 100ms\n    //     } else {\n    //         console.error('Glitch text elements not found!');\n    //     }\n    // },\n    startJournaling() {\n      this.$router.push('/journaling');\n    },\n    getRandomDroplet() {\n      return this.inkDroplets[Math.floor(Math.random() * this.inkDroplets.length)];\n    },\n    getDropletStyle() {\n      const size = Math.random() * (100 - 20) + 20; // Random size within range\n      const left = Math.random() * 100; // Random left position (0% - 100%)\n      const top = Math.random() * 100; // Random top position (0% - 100%)\n      return {\n        width: `${size}px`,\n        height: `${size}px`,\n        left: `${left}%`,\n        top: `${top}%`,\n        position: 'absolute' // Ensure droplets are positioned absolutely\n      };\n    },\n    animateDroplets() {\n      const droplets = this.$refs.hero.children;\n      Array.from(droplets).forEach((droplet, index) => {\n        const duration = 1.2 - index / droplets.length * 0.8; // Ramp up speed\n        gsap.fromTo(droplet, {\n          scale: 0.8,\n          opacity: 0,\n          y: -30\n        }, {\n          scale: 1,\n          opacity: 1,\n          y: 0,\n          duration: duration,\n          delay: index * 0.05,\n          // Adjusted delay for faster start\n          ease: 'power2.out'\n        });\n      });\n\n      // Start fading to black immediately\n      this.setBlackScreen();\n\n      // Show text after all droplets are animated\n      setTimeout(() => {\n        this.showText = true; // Show text after droplet animation\n      }, 3400); // Adjust timing as needed\n    },\n    setBlackScreen() {\n      const overlay = this.$refs.overlay; // Use Vue ref for the overlay\n      if (overlay) {\n        overlay.style.opacity = '1'; // Start fading to black\n        overlay.style.pointerEvents = 'all'; // Make overlay clickable\n\n        // After the fade duration, show the text\n        setTimeout(() => {\n          this.revealText();\n          if (!this.typingInProgress) {\n            this.animateText();\n          }\n        }, 3600); // Match this to the overlay transition duration\n      } else {\n        console.error('Overlay element not found!');\n      }\n    },\n    revealText() {\n      this.showText = true; // Reveal the text on top of the black screen\n      this.$nextTick(() => {\n        const text = document.querySelector('.reveal-text');\n        if (text) {\n          text.style.opacity = '1'; // Make text visible\n        }\n      });\n    }\n  },\n  mounted() {\n    this.$nextTick(() => {\n      this.animateDroplets();\n    });\n  }\n};","map":{"version":3,"names":["gsap","inkDroplet1","inkDroplet2","inkDroplet3","inkDroplet4","inkDroplet5","inkDroplet6","name","data","droplets","Array","fill","inkDroplets","showText","displayedText","isTyping","typingInProgress","newLineText","methods","animateText","typingText","index","interval","setInterval","length","clearInterval","startJournaling","$router","push","getRandomDroplet","Math","floor","random","getDropletStyle","size","left","top","width","height","position","animateDroplets","$refs","hero","children","from","forEach","droplet","duration","fromTo","scale","opacity","y","delay","ease","setBlackScreen","setTimeout","overlay","style","pointerEvents","revealText","console","error","$nextTick","text","document","querySelector","mounted"],"sources":["C:\\Users\\d.Brown\\Desktop\\d.brown\\portfolio\\src\\components\\LandingPage.vue"],"sourcesContent":["<template>\r\n    <section class=\"landing-page\">\r\n        <div>\r\n            <h1 v-if=\"showText\" class=\"reveal-text\">\r\n                {{ displayedText }}\r\n                <span class=\"cursor\" v-if=\"isTyping\"></span>\r\n            </h1>\r\n            <section>\r\n                <div class=\"hero-container\">\r\n                    <div class=\"environment\"></div>\r\n                    <h2 class=\"hero-text glitch layers\" data-text=\"ジャーナル\"><span>近設計</span></h2>\r\n                </div>\r\n            </section>\r\n            <!-- <h2 v-if=\"showNewLine\" class=\"glitch-text\">\r\n        <span class=\"glitch-text-top\">{{ newLineText }}</span>\r\n        <span class=\"glitch-text-bottom\">{{ newLineText }}</span>\r\n        <h2 class=\"hero glitch layers\">{{ newLineText }}</h2>\r\n\r\n    </h2> -->\r\n        </div>\r\n        <div class=\"hero\" ref=\"hero\">\r\n            <img v-for=\"(droplet, index) in droplets\" :key=\"index\" class=\"ink-droplet\" :src=\"getRandomDroplet()\"\r\n                :style=\"getDropletStyle()\" />\r\n        </div>\r\n        <button v-if=\"!showText\" @click=\"startJournaling\">Start Your Journaling Journey</button>\r\n        <div class=\"overlay\" ref=\"overlay\"></div> <!-- Overlay for fading to black -->\r\n    </section>\r\n</template>\r\n\r\n<script>\r\nimport { gsap } from 'gsap';\r\nimport inkDroplet1 from '@/assets/inkDroplet1.svg';\r\nimport inkDroplet2 from '@/assets/inkDroplet2.svg';\r\nimport inkDroplet3 from '@/assets/inkDroplet3.svg';\r\nimport inkDroplet4 from '@/assets/inkDroplet4.svg';\r\nimport inkDroplet5 from '@/assets/inkDroplet5.svg';\r\nimport inkDroplet6 from '@/assets/inkDroplet6.svg';\r\n//   import { text } from 'express';\r\n\r\nexport default {\r\n    name: 'LandingPage',\r\n    data() {\r\n        return {\r\n            droplets: Array(100).fill(0), // Create an array with 100 entries\r\n            inkDroplets: [\r\n                inkDroplet1,\r\n                inkDroplet2,\r\n                inkDroplet3,\r\n                inkDroplet4,\r\n                inkDroplet5,\r\n                inkDroplet6,\r\n            ],\r\n            showText: false,\r\n            displayedText: '',\r\n            isTyping: false,\r\n            typingInProgress: false,\r\n            // showNewLine: false,\r\n            newLineText: 'ジャーナル',\r\n        };\r\n    },\r\n    methods: {\r\n        animateText() {\r\n            if (this.typingInProgress) return;\r\n\r\n            this.typingInProgress = true;\r\n            const typingText = 'ai';\r\n            this.isTyping = true;\r\n\r\n            let index = 0;\r\n            const interval = setInterval(() => {\r\n                this.displayedText += typingText[index];\r\n                index++;\r\n                if (index === typingText.length) {\r\n                    clearInterval(interval);\r\n                    // this.isTyping = false;\r\n                    this.typingInProgress = false;\r\n                    // this.showNewLine = true;\r\n                    // this.animateNewLine();\r\n                }\r\n            }, 1000);\r\n        },\r\n        // animateNewLine() {\r\n        //     const textElementTop = document.querySelector('.glitch-text-top');\r\n        //     const textElementBottom = document.querySelector('.glitch-text-bottom');\r\n\r\n        //     if (textElementTop && textElementBottom) {\r\n        //         const originalText = this.newLineText;\r\n\r\n        //         // Set initial colors\r\n        //         let topColor = '#ff00ff';\r\n        //         let bottomColor = '#00ffff';\r\n        //         textElementTop.style.color = topColor;\r\n        //         textElementBottom.style.color = bottomColor;\r\n\r\n        //         // Function to switch colors\r\n        //         const switchColors = () => {\r\n        //             [topColor, bottomColor] = [bottomColor, topColor]; // Swap colors\r\n        //             textElementTop.style.color = topColor;\r\n        //             textElementBottom.style.color = bottomColor;\r\n        //         };\r\n\r\n        //         // Change color every 3 to 5 seconds\r\n        //         setInterval(switchColors, Math.random() * 2000 + 3000); // Between 3000ms (3s) and 5000ms (5s)\r\n\r\n        //         setInterval(() => {\r\n        //             const randomChar = String.fromCharCode(Math.random() * 126); // Generate a random character\r\n        //             const glitchTextTop = originalText.split('').map((char) => {\r\n        //                 return Math.random() < 0.2 ? randomChar : char; // 20% chance to replace a character\r\n        //             }).join('');\r\n\r\n        //             const glitchTextBottom = originalText.split('').map((char) => {\r\n        //                 return Math.random() < 0.2 ? randomChar : char; // Similar glitch for bottom text\r\n        //             }).join('');\r\n\r\n        //             textElementTop.textContent = glitchTextTop; // Update top text\r\n        //             textElementBottom.textContent = glitchTextBottom; // Update bottom text\r\n        //         }, 100); // Update text every 100ms\r\n        //     } else {\r\n        //         console.error('Glitch text elements not found!');\r\n        //     }\r\n        // },\r\n        startJournaling() {\r\n            this.$router.push('/journaling');\r\n        },\r\n        getRandomDroplet() {\r\n            return this.inkDroplets[Math.floor(Math.random() * this.inkDroplets.length)];\r\n        },\r\n        getDropletStyle() {\r\n            const size = Math.random() * (100 - 20) + 20; // Random size within range\r\n            const left = Math.random() * 100; // Random left position (0% - 100%)\r\n            const top = Math.random() * 100; // Random top position (0% - 100%)\r\n            return {\r\n                width: `${size}px`,\r\n                height: `${size}px`,\r\n                left: `${left}%`,\r\n                top: `${top}%`,\r\n                position: 'absolute', // Ensure droplets are positioned absolutely\r\n            };\r\n        },\r\n        animateDroplets() {\r\n            const droplets = this.$refs.hero.children;\r\n            Array.from(droplets).forEach((droplet, index) => {\r\n                const duration = 1.2 - (index / droplets.length) * 0.8; // Ramp up speed\r\n                gsap.fromTo(droplet, {\r\n                    scale: 0.8,\r\n                    opacity: 0,\r\n                    y: -30,\r\n                }, {\r\n                    scale: 1,\r\n                    opacity: 1,\r\n                    y: 0,\r\n                    duration: duration,\r\n                    delay: index * 0.05, // Adjusted delay for faster start\r\n                    ease: 'power2.out',\r\n                });\r\n            });\r\n\r\n            // Start fading to black immediately\r\n            this.setBlackScreen();\r\n\r\n            // Show text after all droplets are animated\r\n            setTimeout(() => {\r\n                this.showText = true; // Show text after droplet animation\r\n            }, 3400); // Adjust timing as needed\r\n        },\r\n        setBlackScreen() {\r\n            const overlay = this.$refs.overlay; // Use Vue ref for the overlay\r\n            if (overlay) {\r\n                overlay.style.opacity = '1'; // Start fading to black\r\n                overlay.style.pointerEvents = 'all'; // Make overlay clickable\r\n\r\n                // After the fade duration, show the text\r\n                setTimeout(() => {\r\n                    this.revealText();\r\n                    if (!this.typingInProgress) {\r\n                        this.animateText();\r\n                    }\r\n                }, 3600); // Match this to the overlay transition duration\r\n            } else {\r\n                console.error('Overlay element not found!');\r\n            }\r\n        },\r\n        revealText() {\r\n            this.showText = true; // Reveal the text on top of the black screen\r\n            this.$nextTick(() => {\r\n                const text = document.querySelector('.reveal-text');\r\n                if (text) {\r\n                    text.style.opacity = '1'; // Make text visible\r\n                }\r\n            });\r\n        }\r\n    },\r\n    mounted() {\r\n        this.$nextTick(() => {\r\n            this.animateDroplets();\r\n        });\r\n    },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.glitch {\r\n    animation: glitch 1s forwards;\r\n}\r\n\r\n.reveal-text {\r\n    color: white;\r\n    font-size: 48px;\r\n    position: absolute;\r\n    top: 0%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    opacity: 0;\r\n    transition: opacity 1s ease;\r\n    z-index: 2;\r\n}\r\n\r\n.glitch-text {\r\n    position: relative;\r\n    display: inline-block;\r\n    bottom: 20%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    z-index: 2;\r\n}\r\n\r\n.glitch-text-top {\r\n    position: absolute;\r\n    left: 0;\r\n    top: -10px;\r\n    color: #ff00ff;\r\n    transition: color 0.5s ease;\r\n    z-index: 1;\r\n}\r\n\r\n.glitch-text-bottom {\r\n    color: #00ffff;\r\n    opacity: 0.5;\r\n    transition: color 0.5s ease;\r\n}\r\n\r\n@keyframes glitch {\r\n    0% {\r\n        opacity: 1;\r\n        transform: translate(0);\r\n    }\r\n\r\n    10% {\r\n        opacity: 1;\r\n        transform: translate(-2px, -2px);\r\n    }\r\n\r\n    20% {\r\n        opacity: 0.8;\r\n        transform: translate(2px, 0);\r\n    }\r\n\r\n    30% {\r\n        opacity: 0.5;\r\n        transform: translate(-1px, 1px);\r\n    }\r\n\r\n    40% {\r\n        opacity: 1;\r\n        transform: translate(1px, -1px);\r\n    }\r\n\r\n    50% {\r\n        opacity: 1;\r\n        transform: translate(0);\r\n    }\r\n\r\n    60% {\r\n        opacity: 0.5;\r\n        transform: translate(0, 2px);\r\n    }\r\n\r\n    70% {\r\n        opacity: 1;\r\n        transform: translate(-2px, 0);\r\n    }\r\n\r\n    80% {\r\n        opacity: 0.8;\r\n        transform: translate(2px, 1px);\r\n    }\r\n\r\n    100% {\r\n        opacity: 1;\r\n        transform: translate(0);\r\n    }\r\n}\r\n\r\n.cursor {\r\n    display: inline-block;\r\n    width: 2px;\r\n    height: 34px;\r\n    background-color: white;\r\n    animation: blink 0.7s step-end infinite;\r\n}\r\n\r\n@keyframes blink {\r\n\r\n    0%,\r\n    100% {\r\n        opacity: 1;\r\n    }\r\n\r\n    50% {\r\n        opacity: 0;\r\n    }\r\n}\r\n\r\n.landing-page {\r\n    text-align: center;\r\n    padding: 50px;\r\n    background: url('@/assets/parchment.jpg') no-repeat center center;\r\n    background-size: cover;\r\n    background-attachment: fixed;\r\n    height: 100vh;\r\n    position: relative;\r\n    overflow: hidden;\r\n}\r\n\r\n.hero {\r\n    position: relative;\r\n    height: 100%;\r\n}\r\n\r\n.ink-droplet {\r\n    opacity: 0;\r\n}\r\n\r\n.overlay {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: black;\r\n    opacity: 0;\r\n    transition: opacity 8s ease;\r\n    pointer-events: none;\r\n    z-index: 1;\r\n}\r\n\r\n\r\n\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
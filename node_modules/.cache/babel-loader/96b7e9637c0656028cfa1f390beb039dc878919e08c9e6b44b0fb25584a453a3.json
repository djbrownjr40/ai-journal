{"ast":null,"code":"import { toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, normalizeStyle as _normalizeStyle } from \"vue\";\nconst _hoisted_1 = {\n  class: \"landing-page\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"reveal-text\"\n};\nconst _hoisted_3 = {\n  key: 0,\n  class: \"cursor\"\n};\nconst _hoisted_4 = {\n  class: \"hero\",\n  ref: \"hero\"\n};\nconst _hoisted_5 = [\"src\"];\nconst _hoisted_6 = {\n  class: \"overlay\",\n  ref: \"overlay\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"section\", _hoisted_1, [_createElementVNode(\"div\", null, [$data.showText ? (_openBlock(), _createElementBlock(\"h1\", _hoisted_2, [_createTextVNode(_toDisplayString($data.displayedText) + \" \", 1 /* TEXT */), $data.isTyping ? (_openBlock(), _createElementBlock(\"span\", _hoisted_3)) : _createCommentVNode(\"v-if\", true)])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" <h2 v-if=\\\"showNewLine\\\" class=\\\"glitch-text\\\">\\r\\n        <span class=\\\"glitch-text-top\\\">{{ newLineText }}</span>\\r\\n        <span class=\\\"glitch-text-bottom\\\">{{ newLineText }}</span>\\r\\n        <h2 class=\\\"hero glitch layers\\\">{{ newLineText }}</h2>\\r\\n\\r\\n    </h2> \")]), _createElementVNode(\"div\", _hoisted_4, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.droplets, (droplet, index) => {\n    return _openBlock(), _createElementBlock(\"img\", {\n      key: index,\n      class: \"ink-droplet\",\n      src: $options.getRandomDroplet(),\n      style: _normalizeStyle($options.getDropletStyle())\n    }, null, 12 /* STYLE, PROPS */, _hoisted_5);\n  }), 128 /* KEYED_FRAGMENT */))], 512 /* NEED_PATCH */), !$data.showText ? (_openBlock(), _createElementBlock(\"button\", {\n    key: 0,\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.startJournaling && $options.startJournaling(...args))\n  }, \"Start Your Journaling Journey\")) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", _hoisted_6, null, 512 /* NEED_PATCH */), _createCommentVNode(\" Overlay for fading to black \")]);\n}","map":{"version":3,"names":["class","key","ref","_createElementBlock","_hoisted_1","_createElementVNode","$data","showText","_hoisted_2","_createTextVNode","_toDisplayString","displayedText","isTyping","_hoisted_3","_createCommentVNode","_hoisted_4","_Fragment","_renderList","droplets","droplet","index","src","$options","getRandomDroplet","style","_normalizeStyle","getDropletStyle","_hoisted_5","onClick","_cache","args","startJournaling","_hoisted_6"],"sources":["C:\\Users\\d.Brown\\Desktop\\d.brown\\portfolio\\src\\components\\LandingPage.vue"],"sourcesContent":["<template>\r\n    <section class=\"landing-page\">\r\n<div>\r\n    <h1 v-if=\"showText\" class=\"reveal-text\">\r\n        {{ displayedText }}\r\n        <span class=\"cursor\" v-if=\"isTyping\"></span>\r\n    </h1>\r\n        <!-- <h2 v-if=\"showNewLine\" class=\"glitch-text\">\r\n        <span class=\"glitch-text-top\">{{ newLineText }}</span>\r\n        <span class=\"glitch-text-bottom\">{{ newLineText }}</span>\r\n        <h2 class=\"hero glitch layers\">{{ newLineText }}</h2>\r\n\r\n    </h2> -->\r\n</div>\r\n      <div class=\"hero\" ref=\"hero\">\r\n          <img\r\n          v-for=\"(droplet, index) in droplets\"\r\n          :key=\"index\"\r\n          class=\"ink-droplet\"\r\n          :src=\"getRandomDroplet()\"\r\n          :style=\"getDropletStyle()\"\r\n          />\r\n        </div>\r\n        <button v-if=\"!showText\" @click=\"startJournaling\">Start Your Journaling Journey</button>\r\n      <div class=\"overlay\" ref=\"overlay\"></div> <!-- Overlay for fading to black -->\r\n    </section>\r\n  </template>\r\n  \r\n  <script>\r\n  import { gsap } from 'gsap';\r\n  import inkDroplet1 from '@/assets/inkDroplet1.svg';\r\n  import inkDroplet2 from '@/assets/inkDroplet2.svg';\r\n  import inkDroplet3 from '@/assets/inkDroplet3.svg';\r\n  import inkDroplet4 from '@/assets/inkDroplet4.svg';\r\n  import inkDroplet5 from '@/assets/inkDroplet5.svg';\r\n  import inkDroplet6 from '@/assets/inkDroplet6.svg';\r\n//   import { text } from 'express';\r\n  \r\n  export default {\r\n    name: 'LandingPage',\r\n    data() {\r\n      return {\r\n        droplets: Array(100).fill(0), // Create an array with 100 entries\r\n        inkDroplets: [\r\n          inkDroplet1,\r\n          inkDroplet2,\r\n          inkDroplet3,\r\n          inkDroplet4,\r\n          inkDroplet5,\r\n          inkDroplet6,\r\n        ],\r\n        showText: false,\r\n        displayedText: '',\r\n        isTyping: false,\r\n        typingInProgress: false,\r\n        showNewLine: false,\r\n        newLineText: 'ジャーナル',\r\n      };\r\n    },\r\n    methods: {\r\n        animateText(){\r\n            if (this.typingInProgress) return;\r\n\r\n            this.typingInProgress = true;\r\n            const typingText = 'ai';\r\n            this.isTyping = true;\r\n\r\n            let index = 0;\r\n            const interval = setInterval(() => {\r\n                this.displayedText += typingText[index];\r\n                index++;\r\n                if (index === typingText.length) {\r\n                    clearInterval(interval);\r\n                    // this.isTyping = false;\r\n                    this.typingInProgress = false;\r\n                    this.showNewLine = true;\r\n                    this.animateNewLine();\r\n                }\r\n            }, 1000);\r\n        },\r\n        animateNewLine() {\r\n    const textElementTop = document.querySelector('.glitch-text-top');\r\n    const textElementBottom = document.querySelector('.glitch-text-bottom');\r\n\r\n    if (textElementTop && textElementBottom) {\r\n        const originalText = this.newLineText;\r\n\r\n        // Set initial colors\r\n        let topColor = '#ff00ff';\r\n        let bottomColor = '#00ffff';\r\n        textElementTop.style.color = topColor;\r\n        textElementBottom.style.color = bottomColor;\r\n\r\n        // Function to switch colors\r\n        const switchColors = () => {\r\n            [topColor, bottomColor] = [bottomColor, topColor]; // Swap colors\r\n            textElementTop.style.color = topColor;\r\n            textElementBottom.style.color = bottomColor;\r\n        };\r\n\r\n        // Change color every 3 to 5 seconds\r\n        setInterval(switchColors, Math.random() * 2000 + 3000); // Between 3000ms (3s) and 5000ms (5s)\r\n\r\n        setInterval(() => {\r\n            const randomChar = String.fromCharCode(Math.random() * 126); // Generate a random character\r\n            const glitchTextTop = originalText.split('').map((char) => {\r\n                return Math.random() < 0.2 ? randomChar : char; // 20% chance to replace a character\r\n            }).join('');\r\n\r\n            const glitchTextBottom = originalText.split('').map((char) => {\r\n                return Math.random() < 0.2 ? randomChar : char; // Similar glitch for bottom text\r\n            }).join('');\r\n\r\n            textElementTop.textContent = glitchTextTop; // Update top text\r\n            textElementBottom.textContent = glitchTextBottom; // Update bottom text\r\n        }, 100); // Update text every 100ms\r\n    } else {\r\n        console.error('Glitch text elements not found!');\r\n    }\r\n},\r\n      startJournaling() {\r\n        this.$router.push('/journaling');\r\n      },\r\n      getRandomDroplet() {\r\n        return this.inkDroplets[Math.floor(Math.random() * this.inkDroplets.length)];\r\n      },\r\n      getDropletStyle() {\r\n        const size = Math.random() * (100 - 20) + 20; // Random size within range\r\n        const left = Math.random() * 100; // Random left position (0% - 100%)\r\n        const top = Math.random() * 100; // Random top position (0% - 100%)\r\n        return {\r\n          width: `${size}px`,\r\n          height: `${size}px`,\r\n          left: `${left}%`,\r\n          top: `${top}%`,\r\n          position: 'absolute', // Ensure droplets are positioned absolutely\r\n        };\r\n      },\r\n      animateDroplets() {\r\n        const droplets = this.$refs.hero.children;\r\n        Array.from(droplets).forEach((droplet, index) => {\r\n          const duration = 1.2 - (index / droplets.length) * 0.8; // Ramp up speed\r\n          gsap.fromTo(droplet, {\r\n            scale: 0.8,\r\n            opacity: 0,\r\n            y: -30,\r\n          }, {\r\n            scale: 1,\r\n            opacity: 1,\r\n            y: 0,\r\n            duration: duration,\r\n            delay: index * 0.05, // Adjusted delay for faster start\r\n            ease: 'power2.out',\r\n          });\r\n        });\r\n  \r\n        // Start fading to black immediately\r\n        this.setBlackScreen();\r\n  \r\n        // Show text after all droplets are animated\r\n        setTimeout(() => {\r\n          this.showText = true; // Show text after droplet animation\r\n        }, 3400); // Adjust timing as needed\r\n      },\r\n      setBlackScreen() {\r\n        const overlay = this.$refs.overlay; // Use Vue ref for the overlay\r\n        if (overlay) {\r\n          overlay.style.opacity = '1'; // Start fading to black\r\n          overlay.style.pointerEvents = 'all'; // Make overlay clickable\r\n  \r\n          // After the fade duration, show the text\r\n          setTimeout(() => {\r\n            this.revealText();\r\n            if (!this.typingInProgress) { \r\n                this.animateText();\r\n            }\r\n          }, 3600); // Match this to the overlay transition duration\r\n        } else {\r\n          console.error('Overlay element not found!');\r\n        }\r\n      },\r\n      revealText() {\r\n        this.showText = true; // Reveal the text on top of the black screen\r\n        this.$nextTick(() => {\r\n          const text = document.querySelector('.reveal-text');\r\n          if (text) {\r\n            text.style.opacity = '1'; // Make text visible\r\n          }\r\n        });\r\n      }\r\n    },\r\n    mounted() {\r\n      this.$nextTick(() => {\r\n        this.animateDroplets();\r\n      });\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n.glitch {\r\n    animation: glitch 1s forwards;\r\n}\r\n\r\n.reveal-text {\r\n    color: white;\r\n    font-size: 48px;\r\n    position: absolute;\r\n    top: 0%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    opacity: 0;\r\n    transition: opacity 1s ease;\r\n    z-index: 2;\r\n}\r\n\r\n.glitch-text {\r\n    position: relative;\r\n    display: inline-block;\r\n    bottom: 20%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    z-index: 2;\r\n}\r\n\r\n.glitch-text-top {\r\n    position: absolute;\r\n    left: 0;\r\n    top: -10px;\r\n    color: #ff00ff;\r\n    transition: color 0.5s ease;\r\n    z-index: 1;\r\n}\r\n\r\n.glitch-text-bottom {\r\n    color: #00ffff;\r\n    opacity: 0.5;\r\n    transition: color 0.5s ease;\r\n}\r\n\r\n@keyframes glitch {\r\n    0% {\r\n        opacity: 1;\r\n        transform: translate(0);\r\n    }\r\n    10% {\r\n        opacity: 1;\r\n        transform: translate(-2px, -2px);\r\n    }\r\n    20% {\r\n        opacity: 0.8;\r\n        transform: translate(2px, 0);\r\n    }\r\n    30% {\r\n        opacity: 0.5;\r\n        transform: translate(-1px, 1px);\r\n    }\r\n    40% {\r\n        opacity: 1;\r\n        transform: translate(1px, -1px);\r\n    }\r\n    50% {\r\n        opacity: 1;\r\n        transform: translate(0);\r\n    }\r\n    60% {\r\n        opacity: 0.5;\r\n        transform: translate(0, 2px);\r\n    }\r\n    70% {\r\n        opacity: 1;\r\n        transform: translate(-2px, 0);\r\n    }\r\n    80% {\r\n        opacity: 0.8;\r\n        transform: translate(2px, 1px);\r\n    }\r\n    100% {\r\n        opacity: 1;\r\n        transform: translate(0);\r\n    }\r\n}\r\n\r\n.cursor {\r\n    display: inline-block;\r\n    width: 2px;\r\n    height: 34px;\r\n    background-color: white;\r\n    animation: blink 0.7s step-end infinite;\r\n}\r\n\r\n@keyframes blink {\r\n    0%, 100% {\r\n        opacity: 1;\r\n    }\r\n    50% {\r\n        opacity: 0;\r\n    }\r\n}\r\n\r\n.landing-page {\r\n    text-align: center;\r\n    padding: 50px;\r\n    background: url('@/assets/parchment.jpg') no-repeat center center;\r\n    background-size: cover;\r\n    background-attachment: fixed;\r\n    height: 100vh;\r\n    position: relative;\r\n    overflow: hidden;\r\n}\r\n\r\n.hero {\r\n    position: relative;\r\n    height: 100%;\r\n}\r\n\r\n.ink-droplet {\r\n    opacity: 0;\r\n}\r\n\r\n.overlay {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-color: black;\r\n    opacity: 0;\r\n    transition: opacity 8s ease;\r\n    pointer-events: none;\r\n    z-index: 1;\r\n}\r\n\r\n\r\n \r\n\r\n\r\n\r\n\r\n\r\n  </style>\r\n  "],"mappings":";;EACaA,KAAK,EAAC;AAAc;;EADjCC,GAAA;EAGwBD,KAAK,EAAC;;;EAH9BC,GAAA;EAKcD,KAAK,EAAC;;;EASTA,KAAK,EAAC,MAAM;EAACE,GAAG,EAAC;;mBAd5B;;EAwBWF,KAAK,EAAC,SAAS;EAACE,GAAG,EAAC;;;uBAvB3BC,mBAAA,CAwBU,WAxBVC,UAwBU,GAvBdC,mBAAA,CAWM,cAVQC,KAAA,CAAAC,QAAQ,I,cAAlBJ,mBAAA,CAGK,MAHLK,UAGK,GANTC,gBAAA,CAAAC,gBAAA,CAIWJ,KAAA,CAAAK,aAAa,IAAG,GACnB,iBAA2BL,KAAA,CAAAM,QAAQ,I,cAAnCT,mBAAA,CAA4C,QAA5CU,UAA4C,KALpDC,mBAAA,e,KAAAA,mBAAA,gBAOQA,mBAAA,oRAKK,C,GAEPT,mBAAA,CAQQ,OARRU,UAQQ,I,kBAPJZ,mBAAA,CAMEa,SAAA,QArBZC,WAAA,CAgBqCX,KAAA,CAAAY,QAAQ,EAhB7C,CAgBkBC,OAAO,EAAEC,KAAK;yBADtBjB,mBAAA,CAME;MAJDF,GAAG,EAAEmB,KAAK;MACXpB,KAAK,EAAC,aAAa;MAClBqB,GAAG,EAAEC,QAAA,CAAAC,gBAAgB;MACrBC,KAAK,EApBhBC,eAAA,CAoBkBH,QAAA,CAAAI,eAAe;oCApBjCC,UAAA;2DAuBuBrB,KAAA,CAAAC,QAAQ,I,cAAvBJ,mBAAA,CAAwF;IAvBhGF,GAAA;IAuBkC2B,OAAK,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAER,QAAA,CAAAS,eAAA,IAAAT,QAAA,CAAAS,eAAA,IAAAD,IAAA,CAAe;KAAE,+BAA6B,KAvBvFhB,mBAAA,gBAwBMT,mBAAA,CAAyC,OAAzC2B,UAAyC,+BAAClB,mBAAA,iCAAoC,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}